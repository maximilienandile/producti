// Code generated by MockGen. DO NOT EDIT.
// Source: internal/indexing/algoliaIndexer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	search "github.com/algolia/algoliasearch-client-go/v3/algolia/search"
	gomock "github.com/golang/mock/gomock"
)

// MockAlgoliaIndexer is a mock of AlgoliaIndexer interface.
type MockAlgoliaIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockAlgoliaIndexerMockRecorder
}

// MockAlgoliaIndexerMockRecorder is the mock recorder for MockAlgoliaIndexer.
type MockAlgoliaIndexerMockRecorder struct {
	mock *MockAlgoliaIndexer
}

// NewMockAlgoliaIndexer creates a new mock instance.
func NewMockAlgoliaIndexer(ctrl *gomock.Controller) *MockAlgoliaIndexer {
	mock := &MockAlgoliaIndexer{ctrl: ctrl}
	mock.recorder = &MockAlgoliaIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlgoliaIndexer) EXPECT() *MockAlgoliaIndexerMockRecorder {
	return m.recorder
}

// SaveObject mocks base method.
func (m *MockAlgoliaIndexer) SaveObject(object interface{}, opts ...interface{}) (search.SaveObjectRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{object}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveObject", varargs...)
	ret0, _ := ret[0].(search.SaveObjectRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObject indicates an expected call of SaveObject.
func (mr *MockAlgoliaIndexerMockRecorder) SaveObject(object interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{object}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObject", reflect.TypeOf((*MockAlgoliaIndexer)(nil).SaveObject), varargs...)
}

// Search mocks base method.
func (m *MockAlgoliaIndexer) Search(query string, opts ...interface{}) (search.QueryRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(search.QueryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockAlgoliaIndexerMockRecorder) Search(query interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockAlgoliaIndexer)(nil).Search), varargs...)
}
